import tensorflow as tf

def ConvNet(x, s, weight1, weight2, weight3, _offset1, _offset2, _offset3, _scale1, _scale2, _scale3):
  	h1 = tf.nn.conv2d(x, weight1, strides = [1, s, s,1], padding = "SAME")
	h1_mean , h1_var= tf.nn.moments(h1, 0)
	h1 = tf.nn.batch_normalization(h1, h1_mean, h1_var, _offset1, _scale1, variance_epsilon=0.001, name=None)
	h1 = tf.nn.relu(h1)
	h2 = tf.nn.conv2d(h1, weight2, strides = [1, 1, 1,1], padding = "SAME")
	h2_mean , h2_var= tf.nn.moments(h2, 0)
	h2 = tf.nn.batch_normalization(h2, h2_mean, h2_var, _offset2, _scale2, variance_epsilon=0.001, name=None)
	h2 = tf.nn.relu(h2)	
	h3 = tf.nn.conv2d(h2, weight3, strides = [1, 1, 1,1], padding = "SAME")
	h3_mean , h3_var= tf.nn.moments(h3, 0)
	h3 = tf.nn.batch_normalization(h3, h3_mean, h3_var, _offset3, _scale3, variance_epsilon=0.001, name=None)
	h3 = tf.nn.relu(h3)	
	return h3

def IncreaseResNet(x, s, weight1, weight2, weight3, _offset1, _offset2, _offset3, _scale1, _scale2, _scale3, weight):
  	r = ConvNet(x, s, weight1, weight2, weight3, _offset1, _offset2, _offset3, _scale1, _scale2, _scale3)
	x = tf.nn.conv2d(x, weight, strides = [1,s,s,1], padding = "SAME")
	return r+x
 
def ResNet(x, s, weight1, weight2, weight3, _offset1, _offset2, _offset3, _scale1, _scale2, _scale3):
	r = ConvNet(x, s, weight1, weight2, weight3, _offset1, _offset2, _offset3, _scale1, _scale2, _scale3)
	return r+x

def model(x, weight, offsets, scales):
	x = tf.reshape(x, [-1, img_size, img_size, 3])
	c = tf.nn.conv2d(x, weights['cw'], strides = [1,2,2,1], padding = "SAME")
	c1_mean , c1_var= tf.nn.moments(c, 0)
	c = tf.nn.batch_normalization(c, c1_mean, c1_var, offsets['o'], scales['s'], variance_epsilon=0.001, name=None)
	c = tf.nn.relu(c)
	c = tf.nn.max_pool(c, ksize =[1,3,3,1], strides= [1,2,2,1], padding="SAME")
	
	s=1
	c = IncreaseResNet(c, s, 
	weights[weight_name[0]], weights[weight_name[1]], weights[weight_name[2]],
	offsets[offset_name[0]], offsets[offset_name[1]], offsets[offset_name[2]],
	scales[scall_name[0]], scales[scall_name[1]], scales[scall_name[2]], 	
	weight = weight_re['w0'])
	
	for index in range(3,9,3):
		c = ResNet(c, s,
		weights[weight_name[index]], weights[weight_name[index+1]], weights[weight_name[index+2]],
		offsets[offset_name[index]], offsets[offset_name[index+1]], offsets[offset_name[index+2]], 
		scales[scall_name[index]], scales[scall_name[index+1]], scales[scall_name[index+2]])
	
	s=2	
	c = IncreaseResNet(c, s, 
	weights[weight_name[9]], weights[weight_name[10]], weights[weight_name[11]],
	offsets[offset_name[9]], offsets[offset_name[10]], offsets[offset_name[11]], 
	scales[scall_name[9]], scales[scall_name[10]], scales[scall_name[11]], 
	weight = weight_re['w1'])
    
	s=1
	for index in range(12,21,3):
		c = ResNet(c, s, 
		weights[weight_name[index]], weights[weight_name[index+1]], weights[weight_name[index+2]],
		offsets[offset_name[index]], offsets[offset_name[index+1]], offsets[offset_name[index+2]], 
		scales[scall_name[index]], scales[scall_name[index+1]], scales[scall_name[index+2]])
	
	s=2	
	c = IncreaseResNet(c, s, 
	weights[weight_name[21]], weights[weight_name[22]], weights[weight_name[23]],
	offsets[offset_name[21]], offsets[offset_name[22]], offsets[offset_name[23]], 
	scales[scall_name[21]], scales[scall_name[22]], scales[scall_name[23]], 
	weight = weight_re['w2'])		
	
	s=1
	for index in range(24,90,3):
		c = ResNet(c, s, 
		weights[weight_name[index]], weights[weight_name[index+1]], weights[weight_name[index+2]],
		offsets[offset_name[index]], offsets[offset_name[index+1]], offsets[offset_name[index+2]], 
		scales[scall_name[index]], scales[scall_name[index+1]], scales[scall_name[index+2]])	
	
	s=2	
	c = IncreaseResNet(c, s, 
	weights[weight_name[90]], weights[weight_name[91]], weights[weight_name[92]],
	offsets[offset_name[90]], offsets[offset_name[91]], offsets[offset_name[92]], 
	scales[scall_name[90]], scales[scall_name[91]], scales[scall_name[92]], 
	weight = weight_re['w3'])	
	
	s=1
	for index in range(93,99,3):
		c = ResNet(c, s, 
		weights[weight_name[index]], weights[weight_name[index+1]], weights[weight_name[index+2]],
		offsets[offset_name[index]], offsets[offset_name[index+1]], offsets[offset_name[index+2]], 
		scales[scall_name[index]], scales[scall_name[index+1]], scales[scall_name[index+2]])
		
	avg = tf.nn.avg_pool(c, ksize = [1,2,2,1], strides = [1,1,1,1], padding = "SAME")
	fc_input = tf.reshape(avg, [-1,100352])
	fc_output = tf.matmul(fc_input, weight_fc)
	return tf.matmul(fc_output, weight_output)

